//
// Generated file, do not edit! Created by opp_msgtool 6.0 from Frame/Frame.msg.
//

#ifndef __FRAME_M_H
#define __FRAME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class Frame;
/**
 * Class generated from <tt>Frame/Frame.msg:19</tt> by opp_msgtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * packet Frame
 * {
 *     int SeqNum;
 *     string Payload;
 *     string Trailer;
 *     int FrameType;
 *     int ACKNACKNumber;
 * }
 * </pre>
 */
class Frame : public ::omnetpp::cPacket
{
  protected:
    int SeqNum = 0;
    omnetpp::opp_string Payload;
    omnetpp::opp_string Trailer;
    int FrameType = 0;
    int ACKNACKNumber = 0;

  private:
    void copy(const Frame& other);

  protected:
    bool operator==(const Frame&) = delete;

  public:
    Frame(const char *name=nullptr, short kind=0);
    Frame(const Frame& other);
    virtual ~Frame();
    Frame& operator=(const Frame& other);
    virtual Frame *dup() const override {return new Frame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSeqNum() const;
    virtual void setSeqNum(int SeqNum);

    virtual const char * getPayload() const;
    virtual void setPayload(const char * Payload);

    virtual const char * getTrailer() const;
    virtual void setTrailer(const char * Trailer);

    virtual int getFrameType() const;
    virtual void setFrameType(int FrameType);

    virtual int getACKNACKNumber() const;
    virtual void setACKNACKNumber(int ACKNACKNumber);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Frame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Frame& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline Frame *fromAnyPtr(any_ptr ptr) { return check_and_cast<Frame*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __FRAME_M_H

